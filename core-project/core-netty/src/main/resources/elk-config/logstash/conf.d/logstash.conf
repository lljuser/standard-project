input {
	beats {
		# The port to listen on for filebeat connections.
		port => 5044
		# The IP address to listen for filebeat connections.
		host => "0.0.0.0"
	}
	
	jdbc {	 
		jdbc_driver_library => "/etc/logstash/jdbc/sqljdbc42.jar"
		jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
		jdbc_connection_string => "jdbc:sqlserver://heyicnabs2088.sqlserver.rds.aliyuncs.com:3433;Database=chinesesns;"
		jdbc_user => "appuser"
		jdbc_password => "HeyiD_y2__6"	 
		schedule => "*/1 * * * *"
		last_run_metadata_path => "/etc/logstash/conf.d/last_run_sns.app"
		statement => "select  *,NULL as DeleteTime, CONVERT(varchar(100), PubTime, 120) as newpubtime,'false' as IsDelete  
				from PostSubject where IsApproved = 1 and Status = 0 and 
				( 	
					UpdateTime > dateadd(hour,8,:sql_last_value) or
					CreateTime > dateadd(hour,8,:sql_last_value)
				) 
				union
				select *,CONVERT(varchar(100), DeleteTime, 120) as newpubtime,'true' as IsDelete 
				from [dbo].[PostSubjectDelete] where DeleteTime > dateadd(hour,8,:sql_last_value) "
		type => "sns.app"
        tags => ["es_sns.app_newpubtime"]	
	} 
	
	jdbc {	 
		jdbc_driver_library => "/etc/logstash/jdbc/sqljdbc42.jar"
		jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
		jdbc_connection_string => "jdbc:sqlserver://heyicnabs2088.sqlserver.rds.aliyuncs.com:3433;Database=chinesesns;"
		jdbc_user => "appuser"
		jdbc_password => "HeyiD_y2__6"	 
		schedule => "*/1 * * * *"
		last_run_metadata_path => "/etc/logstash/conf.d/last_run_sns.user"
		statement => "select *,CONVERT(varchar(100), CreateTime, 120) as newcreatetime from [dbo].[UserProfile] where 
				UpdateTime > dateadd(hour,8,:sql_last_value) or 
				CreateTime > dateadd(hour,8,:sql_last_value)"
		type => "sns.user"       		
	} 

	jdbc {	 
		jdbc_driver_library => "/etc/logstash/jdbc/sqljdbc42.jar"
		jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
		jdbc_connection_string => "jdbc:sqlserver://heyicnabs2088.sqlserver.rds.aliyuncs.com:3433;Database=ChineseABS;"
		jdbc_user => "appuser"
		jdbc_password => "HeyiD_y2__6"	 
		schedule => "*/1 * * * *"
		last_run_metadata_path => "/etc/logstash/conf.d/last_run_sns.product"
		statement => "select d.deal_id as id,deal_name as simplename,deal_name_chinese as fullname,
					  CONVERT(varchar(100), time_stamp_first_display_on_web , 120) as createtime,
					  CONVERT(varchar(100), d.time_stamp, 120) as updatetime
					  from [dbo].[Deal] as d
					  join [web].[DealSummary] as ds on ds.deal_id = d.deal_id
					  where [is_private_deal] =0 and display_on_web = 1 and 
						(
							d.time_stamp > dateadd(hour,8,:sql_last_value) or
							time_stamp_first_display_on_web > dateadd(hour,8,:sql_last_value)
						)"
		type => "sns.product"       		
	} 
	
	jdbc {	 
		jdbc_driver_library => "/etc/logstash/jdbc/sqljdbc42.jar"
		jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
		jdbc_connection_string => "jdbc:sqlserver://heyicnabs2088.sqlserver.rds.aliyuncs.com:3433;Database=ChineseABS;"
		jdbc_user => "appuser"
		jdbc_password => "HeyiD_y2__6"	 
		schedule => "*/1 * * * *"
		last_run_metadata_path => "/etc/logstash/conf.d/last_run_sns.note"
		statement => "select * from (SELECT n.note_id as id, n.deal_id,
				n.[description] as name,n.[name] as simplename,
				d.deal_name as productsimplename, deal_name_chinese as productname
				,CONVERT(varchar(100), n.time_stamp , 120) as createtime
				,CONVERT(varchar(100), d.time_stamp, 120) as updatetime
				FROM dbo.Note n
				JOIN web.DealSummary ds on ds.deal_id=n.deal_id and ds.display_on_web=1
				JOIN dbo.deal as d on d.deal_id=n.deal_id and d.is_private_deal = 0
				) as A where 
					createtime> dateadd(hour,8,:sql_last_value) or 
					updatetime> dateadd(hour,8,:sql_last_value) "
		type => "sns.note"       		
	}
		
	jdbc {	 
		jdbc_driver_library => "/etc/logstash/jdbc/sqljdbc42.jar"
		jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
		jdbc_connection_string => "jdbc:sqlserver://heyicnabs2088.sqlserver.rds.aliyuncs.com:3433;Database=ChineseABS;"
		jdbc_user => "appuser"
		jdbc_password => "HeyiD_y2__6"	 
		schedule => "*/1 * * * *"
		last_run_metadata_path => "/etc/logstash/conf.d/last_run_sns.org"
		statement => "select * from (
				select organization_id as id,full_name as name,short_name as 
				simplename ,CONVERT(varchar(100), time_stamp , 120)  as createtime, 
				scope from dbo.Organization) as A where 
					createtime>  dateadd(hour,8,:sql_last_value)"
		type => "sns.org"       		
	} 

	
}

filter {
	if	[type] == "nginx.access" { 
		geoip {
			source => "clientip"			 
		}
		
		useragent {
			source => "httpagent"			
		}
		
		ruby {
			init => "require 'base64'"
			code => " 
				utoken = event.get('usertoken')
				if !utoken.nil?
					arr = utoken.split('_')	
					if arr.size() > 1
						arr.pop()
						utoken = arr.join('_')						
					end					
					event.set('usertoken',utoken)
				end
				
				authorization=event.get('authorization')  
				arr= authorization.split(' ')
				username=''
				if arr.size() > 1 
					username=Base64.decode64(arr[1]).split(':')[0] 
				end
				event.set('apiusername', username)
				
			"
		} 
 
		
		date {
			match => ["accesstime","ISO8601"] 
	    }
	} 
	 
	
	if  [type] == "sns.app" {
	    date {
			match => ["newpubtime","yyyy-MM-dd HH:mm:ss"] 
	    }
		mutate {
			#copy => { "newpubtime" => "pubtime" }
			#remove_field => ["newpubtime"]
			rename => { "newpubtime" => "pubtime" }
			
		}
	} 

	if  [type] == "sns.user" {
	    date {
			match => ["newcreatetime","yyyy-MM-dd HH:mm:ss"] 
	    }
		mutate {
			rename => { "newcreatetime" => "createtime" }
			
		}		 
	} 
	
	if  [type] == "sns.product" {
	    date {
			match => ["createtime","yyyy-MM-dd HH:mm:ss"] 
	    }		 
	}
	
	if  [type] == "sns.note" {
	    date {
			match => ["createtime","yyyy-MM-dd HH:mm:ss"] 
	    }		 
	}
	
	if  [type] == "sns.org" {
	    date {
			match => ["createtime","yyyy-MM-dd HH:mm:ss"] 
	    }		 
	}
}
output { 	 
	stdout { codec => rubydebug }	
	
	if  [type] == "sns.app" {
		elasticsearch {
			hosts => [ "localhost:9200" ] 
			user => "elastic" 
			password => "cnabs@2017"	
			index => "%{type}-%{+YYYY.MM}" 
			document_id => "%{id}" 
			template_name => "%{type}-*"   
		} 
	}
	
	if  [type] == "sns.user" {
		elasticsearch {
			hosts => [ "localhost:9200" ] 
			user => "elastic" 
			password => "cnabs@2017"	
			index => "%{type}-%{+YYYY.MM}" 
			document_id => "%{id}" 
			template_name => "%{type}-*"  
		} 
	}
	
	if  [type] == "sns.product" {
		elasticsearch {
			hosts => [ "localhost:9200" ] 
			user => "elastic" 
			password => "cnabs@2017"	
			index => "%{type}-%{+YYYY}" 
			document_id => "%{id}" 
			template_name => "%{type}-*"  
		} 
	}
	
	if  [type] == "sns.note" {
		elasticsearch {
			hosts => [ "localhost:9200" ] 
			user => "elastic" 
			password => "cnabs@2017"	
			index => "%{type}-%{+YYYY}" 
			document_id => "%{id}" 
			template_name => "%{type}-*"  
		} 
	}
	
	if  [type] == "sns.org" {
		elasticsearch {
			hosts => [ "localhost:9200" ] 
			user => "elastic" 
			password => "cnabs@2017"	
			index => "%{type}-%{+YYYY}" 
			document_id => "%{id}" 
			template_name => "%{type}-*"  
		} 
	}
	
	if  [type] == "nginx.access" { 
		elasticsearch {
			hosts => [ "localhost:9200" ] 
			user => "elastic"
			password => "cnabs@2017"	 
			index => "%{type}-%{+YYYY.MM}"	 
			template_name => "%{type}-*"   			
		}   
	} 
	
	if  [type] == "kibana.nginx.access" {  
		elasticsearch {
			hosts => [ "localhost:9200" ] 
			user => "elastic"
			password => "cnabs@2017"	 
			index => "kibana.nginx.access-%{+YYYY.MM}" 
		}   
	}
	 	
}